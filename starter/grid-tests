let emptyGrid = [
  [" ", " ", " "],
  [" ", " ", " "],
  [" ", " ", " "],
];

let grid1 = [
  ["X", "X", "X"],
  [" ", " ", " "],
  [" ", " ", " "],
];

let grid2 = [
  [" ", "O", " "],
  [" ", "O", " "],
  [" ", "O", " "],
];

let grid3 = [
  [" ", " ", " "],
  [" ", " ", " "],
  ["X", "X", "X"],
];

let tieGrid = [
  ["X", "O", "X"],
  ["X", "O", "O"],
  ["O", "X", "O"],
];

let noWinGrid = [
  ["X", "X", " "],
  ["X", "O", "O"],
  ["O", "X", "O"],
];

/* //original but bulky - does work
static checkWin(grid) {
    // Returns 'X' if player X wins
    // Returns 'O' if player O wins
    // Returns 'T' if the game is a tie
    // Returns false if the game has not ended
    let emptyGrid = grid.every((row) => row.every((space) => space === " "));
    if (emptyGrid) {
      // Return false if the game has not ended
      return false;
    } else {
      let horizontalWin = TTT.horizontalCheck(grid);
      if (horizontalWin) {
        //if horizontalCheck did not return a falsey,
        //return the letter in the first place in the returned array
        return horizontalWin[0][0];
      } else {
        //if no horizontal win, check for a diagonal win
        let diagonalWin = TTT.diagonalCheck(grid);
        if (diagonalWin) {
          return diagonalWin;
        } else {
          //if no horizontal or diagonal win, check for vertical win
          let verticalWin = TTT.verticalCheck(grid);
          if (verticalWin) {
            return verticalWin;
          } else {
            //if the grid is not empty and there is
            //no horizontal, diagonal, or vertical win
            // check if tie or no win yet
            let tie = grid.every((row) => row.every((space) => space !== " "));
            if (tie === true) {
              return "T";
            } else {
              // Return false if the game has not ended
              return false;
            }
          }
        }
      }
      // Return 'X' if player X wins
      // Return 'O' if player O wins
      // Return 'T' if the game is a tie
    }
  }

//refactored - does not work
function checkWin(grid) {
  if (emptyGrid) { 
    // Return false if the game has not ended - works
    return false;
  } else {
    if (TTT.horizontalCheck(grid)) {
      //horizontal win - works
      return TTT.horizontalCheck(grid);
    } else {
      if (TTT.diagonalCheck(grid)) {
        //diagonal win - works
        return TTT.diagonalCheck(grid);
      } else {
        if (TTT.verticalCheck(grid)) {
          //vertical win
          return TTT.verticalCheck(grid);
        } else {
          if (fullGrid === true) {
            //game ended in a tie
            return "T";
          } else {
            // Return false if the game has not ended
            return false;
          }
        }
      }
    }
    // Return 'X' if player X wins
    // Return 'O' if player O wins
    // Return 'T' if the game is a tie
  }
} */

function horizontalCheck(grid) {
  let win = grid.find((row) =>
    row.every((space) => row[0] === space && space != " ")
  );
  if (win) {
    return win[0];
  } else {
    return false;
  }
}

console.log(horizontalCheck(grid2));
console.log(horizontalCheck(grid3));
